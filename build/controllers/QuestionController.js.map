{"version":3,"sources":["../../app/controllers/QuestionController.js"],"names":["QuestionController","create","req","res","uniqueID","QuestionRecord","allQuestionRecord","values","id","createdOn","Date","toUTCString","createdBy","value","body","meetup","title","votes","unshift","fs","writeFile","JSON","stringify","error","console","log","status","json","message","data","user","end","errors","upvote","questionId","params","question_id","singleRecordIndex","send","upvotedQuestion","updateVotes","splice","downvote"],"mappings":"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","sourcesContent":["// import external modules\nimport fs from 'fs';\nimport QuestionRecord from '../data/questionrecord.json';\nimport filterInt from '../helper/filterInt';\nimport findIndex from '../helper/findIndex';\nimport generateID from '../helper/generateID';\n\nconst QuestionController = {\n  /**\n   *\n   * Create new question record\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object question object\n   */\n  async create(req, res) {\n    const uniqueID = generateID(QuestionRecord.allQuestionRecord, 0);\n\n    // get all post request body data\n    const values = {\n      id: uniqueID,\n      createdOn: new Date().toUTCString(),\n      createdBy: req.value.body.createdBy,\n      meetup: req.value.body.meetup,\n      title: req.value.body.title,\n      body: req.value.body.body,\n      votes: 0,\n    };\n\n    try {\n      // save record to data structure\n      QuestionRecord.allQuestionRecord.unshift(values);\n\n      // read question json file\n      fs.writeFile('app/data/questionrecord.json', JSON.stringify(QuestionRecord), 'utf8', (error) => {\n        console.log(`file not found: ${error}`);\n      });\n\n      return res.status(200).json({\n        status: 201,\n        message: 'New Meetup Question Record Created Successfully',\n        data: [{\n          user: values.createdBy,\n          meetup: values.meetup,\n          title: values.title,\n          body: values.body,\n        }],\n      });\n    } catch (error) {\n      return res.status(400).end({\n        status: 400,\n        errors: {\n          error,\n        },\n      });\n    }\n  },\n\n  /**\n   *\n   * Upvote a specific question record\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object question object\n   */\n  async upvote(req, res) {\n    try {\n      // Get and sanitize for valid integer\n      const questionId = filterInt(req.params.question_id);\n\n      // Get a single meet up record\n      const singleRecordIndex = findIndex(QuestionRecord\n        .allQuestionRecord, questionId);\n\n      // if no matching question record\n      if (singleRecordIndex === -1) {\n        return res.status(404).send({\n          status: 404,\n          message: 'No Question Record Found',\n          error: 404,\n        });\n      }\n\n      // question being upvoted\n      const upvotedQuestion = QuestionRecord.allQuestionRecord[singleRecordIndex];\n\n      // increase vote\n      const updateVotes = {\n        id: upvotedQuestion.id,\n        createdOn: upvotedQuestion.createdOn,\n        createdBy: upvotedQuestion.createdBy,\n        meetup: upvotedQuestion.meetup,\n        title: upvotedQuestion.title,\n        body: upvotedQuestion.body,\n        votes: upvotedQuestion.votes + 1,\n      };\n\n      // Update question record\n      QuestionRecord.allQuestionRecord.splice(singleRecordIndex, 1, updateVotes);\n      // read question json file\n      fs.writeFile('app/data/questionrecord.json', JSON.stringify(QuestionRecord), 'utf8', (error) => {\n        console.log(`file not found: ${error}`);\n      });\n\n      return res.status(200).json({\n        status: 200,\n        message: 'Question upvoted successfully',\n        data: [{\n          meetup: updateVotes.meetup,\n          title: updateVotes.title,\n          body: updateVotes.body,\n        }],\n      });\n    } catch (error) {\n      return res.status(404).end({\n        status: 404,\n        errors: {\n          error,\n        },\n      });\n    }\n  },\n\n  /**\n   *\n   * Downvote a specific question record\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object question object\n   */\n  async downvote(req, res) {\n    try {\n      // Get and sanitize for valid integer\n      const questionId = filterInt(req.params.question_id);\n\n      // Get a single meet up record\n      const singleRecordIndex = findIndex(QuestionRecord\n        .allQuestionRecord, questionId);\n\n      // if no matching question record\n      if (singleRecordIndex === -1) {\n        return res.status(404).send({\n          status: 404,\n          message: 'No Question Record Found',\n          error: 404,\n        });\n      }\n\n      // question being upvoted\n      const upvotedQuestion = QuestionRecord.allQuestionRecord[singleRecordIndex];\n\n      // increase vote\n      const updateVotes = {\n        id: upvotedQuestion.id,\n        createdOn: upvotedQuestion.createdOn,\n        createdBy: upvotedQuestion.createdBy,\n        meetup: upvotedQuestion.meetup,\n        title: upvotedQuestion.title,\n        body: upvotedQuestion.body,\n        votes: upvotedQuestion.votes - 1,\n      };\n\n      // Update question record\n      QuestionRecord.allQuestionRecord.splice(singleRecordIndex, 1, updateVotes);\n      // read question json file\n      fs.writeFile('app/data/questionrecord.json', JSON.stringify(QuestionRecord), 'utf8', (error) => {\n        console.log(`file not found: ${error}`);\n      });\n\n      return res.status(200).json({\n        status: 200,\n        message: 'Question Downvoted successfully',\n        data: [{\n          meetup: updateVotes.meetup,\n          title: updateVotes.title,\n          body: updateVotes.body,\n        }],\n      });\n    } catch (error) {\n      return res.status(404).end({\n        status: 404,\n        errors: {\n          error,\n        },\n      });\n    }\n  },\n\n};\n\n// expose QuestionController to be use in another file\nexport default QuestionController;\n"],"file":"QuestionController.js"}