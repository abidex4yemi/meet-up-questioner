{"version":3,"sources":["../../app/controllers/MeetupController.js"],"names":["MeetupController","create","req","res","images","value","body","uniqueID","MeetupRecord","allMeetupRecord","values","id","createdOn","Date","toUTCString","location","topic","happeningOn","tags","unshift","fs","writeFile","JSON","stringify","error","console","log","status","json","message","data","send","meetupResponse","meetupId","params","meetup_id","singleRecord","meetupRsvp","allMeetupRsvp","getSingleMeetup","errors","getAllMeetups","result","totalRows","length","getAllUpComing","upcoming"],"mappings":"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","sourcesContent":["// import external modules\nimport fs from 'fs';\nimport MeetupRecord from '../data/meetuprecord';\nimport filterInt from '../helper/filterInt';\nimport findSingleRecord from '../helper/findSingleRecord';\nimport findAllRecords from '../helper/findAllRecords';\nimport generateID from '../helper/generateID';\n\nconst MeetupController = {\n  /**\n   *\n   * Create new meet up record\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object meetup object\n   */\n  async create(req, res) {\n    // Set default value for optional fields if not set\n    const images = req.value.body.images || '';\n    const uniqueID = generateID(MeetupRecord.allMeetupRecord, 0);\n\n\n    // get all post request body data\n    const values = {\n      id: uniqueID,\n      createdOn: new Date().toUTCString(),\n      location: req.value.body.location,\n      images: [images],\n      topic: req.value.body.topic,\n      happeningOn: req.value.body.happeningOn,\n      tags: req.value.body.tags,\n    };\n\n    try {\n      // save record to data structure\n      MeetupRecord.allMeetupRecord.unshift(values);\n\n      // read meetup json file\n      fs.writeFile('app/data/meetuprecord.json', JSON.stringify(MeetupRecord), 'utf8', (error) => {\n        console.log(`file not found: ${error}`);\n      });\n\n      return res.status(201).json({\n        status: 201,\n        message: 'New Meet Up Record Created Successfully',\n        data: [{\n          topic: values.topic,\n          location: values.location,\n          happeningOn: values.happeningOn,\n          tags: values.tags,\n        }],\n      });\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n\n  /**\n    *\n    * Accept or decline scheduled meetup\n    *\n    * @param object req\n    * @param object res\n    *\n    * @returns object meetupRsvp object\n    */\n  async meetupResponse(req, res) {\n    try {\n      // Get and sanitize for valid integer\n      const meetupId = filterInt(req.params.meetup_id);\n\n      // Get a single meet up record\n      const singleRecord = findSingleRecord(MeetupRecord\n        .allMeetupRecord, meetupId);\n\n      // if no matching question record\n      if (typeof singleRecord === 'undefined') {\n        return res.status(404).send({\n          status: 404,\n          message: 'No Meetup RSVP Record Found',\n          error: 404,\n        });\n      }\n\n      // get all matching data\n      const meetupRsvp = {\n        id: singleRecord.id,\n        topic: singleRecord.topic,\n        status: ['maybe'],\n      };\n\n      // save record to data structure\n      MeetupRecord.allMeetupRsvp.unshift(meetupRsvp);\n\n      // read meetup json file\n      fs.writeFile('app/data/meetuprecord.json', JSON.stringify(MeetupRecord), 'utf8', (error) => {\n        console.log(`file not found: ${error}`);\n      });\n\n      return res.status(201).json({\n        message: 'Meetup RSVP record created',\n        status: 201,\n        data: [meetupRsvp],\n      });\n    } catch (error) {\n      return res.status(404).send(error);\n    }\n  },\n\n  /**\n   *\n   * Get specific meet up record\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object meetup object\n   */\n  async getSingleMeetup(req, res) {\n    try {\n      // Get valid integer\n      const meetupId = filterInt(req.params.meetup_id);\n\n      // Get a single meet up record\n      const singleRecord = findSingleRecord(MeetupRecord\n        .allMeetupRecord, meetupId);\n\n      // On success\n      return res.status(200).json({\n        status: 200,\n        data: [{\n          topic: singleRecord.topic,\n          location: singleRecord.location,\n          happeningOn: singleRecord.happeningOn,\n          tags: singleRecord.tags,\n        }],\n      });\n    } catch (error) {\n      return res.status(404).send({\n        status: 404,\n        errors: {\n          message: 'Ooops error just occurred! meet up record not found',\n          error,\n        },\n      });\n    }\n  },\n\n  /**\n   *\n   * Get all all meet up record\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object meetup object\n   */\n  async getAllMeetups(req, res) {\n    try {\n      const result = findAllRecords(MeetupRecord.allMeetupRecord);\n      const totalRows = result.length;\n      if (!result) {\n        return res.status(404).send({\n          message: 'No Record Found',\n          error: 404,\n        });\n      }\n\n      return res.status(200).json({\n        status: 200,\n        message: `${totalRows} Meet Up Records Found`,\n        data: result,\n      });\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n\n  /**\n   *\n   * Get all upcoming meetup records\n   *\n   * @param object req\n   * @param object res\n   *\n   * @returns object meetup object\n   */\n  async getAllUpComing(req, res) {\n    try {\n      const result = findAllRecords(MeetupRecord.upcoming);\n\n      const totalRows = result.length;\n\n      if (!result) {\n        return res.status(404).send({\n          message: 'No Record Found',\n          error: 404,\n        });\n      }\n\n      return res.status(200).json({\n        status: 200,\n        message: `${totalRows} Upcoming Meet Up Records Found`,\n        data: result,\n      });\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n};\n\n// expose MeetupController to be use in another file\nexport default MeetupController;\n"],"file":"MeetupController.js"}